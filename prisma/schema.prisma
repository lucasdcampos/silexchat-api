// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  ONLINE
  AFK
  OFFLINE
}

enum ChatType {
  DM
  GROUP
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  email        String    @unique
  passwordHash String
  publicKey    String
  avatarUrl    String?
  about        String?
  status       Status    @default(OFFLINE)
  createdAt    DateTime  @default(now())

  ownedChats   Chat[]            @relation("OwnedChats")
  participants ChatParticipant[]
  messages     Message[]

  ReadReceipt ReadReceipt[]
}

model Chat {
  id         Int      @id @default(autoincrement())
  type       ChatType
  name       String?
  avatarUrl  String?
  inviteCode String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  ownerId    Int?
  owner      User?             @relation("OwnedChats", fields: [ownerId], references: [id], onDelete: SetNull)

  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  userId   Int
  chatId   Int
  isHidden Boolean  @default(false)
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@id([userId, chatId])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  senderId  Int
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  readBy    ReadReceipt[]

  @@index([chatId])
}

model ReadReceipt {
  userId    Int
  messageId Int
  readAt    DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([userId, messageId])
}